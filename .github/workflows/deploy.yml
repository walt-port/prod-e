name: Deploy Production Experience
# Automated deployment workflow for the Production Experience project
# For complete documentation, see .github/CICD.md

on:
  push:
    branches: ['main']
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7  # Updated to 1.5.7 for better compatibility

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Debug - Check environment
        run: |
          echo "Node version:"
          node -v
          echo "NPM version:"
          npm -v
          echo "Working directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Content of cdktf.json:"
          cat cdktf.json
          echo "File encoding check:"
          file cdktf.json
          echo "Check for BOM in cdktf.json:"
          hexdump -C cdktf.json | head -1

      - name: Install cdktf-cli
        run: |
          npm install -g cdktf-cli@0.20.7  # Updated to 0.20.7 for better compatibility
          echo "CDKTF version:"
          cdktf --version

      - name: Install packages
        run: npm ci --legacy-peer-deps

      - name: Clean cdktf.out and .gen directories
        run: |
          rm -rf cdktf.out
          rm -rf .gen

      - name: Run tests
        run: npm test

      - name: Fix package version conflicts
        run: |
          npm uninstall cdktf
          npm install cdktf@0.20.7 --save --legacy-peer-deps  # Match CLI version

      - name: Set environment variable to suppress jsii warnings
        run: echo "JSII_SUPPRESS_UPGRADE_PROMPT=1" >> $GITHUB_ENV

      - name: Get dependencies
        run: cdktf get

      - name: Synthesize
        run: npm run synth

      - name: Create Lambda zip file
        run: |
          mkdir -p node_modules/backup
          cp infrastructure/lambda/backup.js node_modules/backup/
          cd node_modules/backup
          zip -r backup.zip .
          cp backup.zip ../../
          cd ../../
          mv backup.zip dummy-backup.zip
          cp dummy-backup.zip cdktf.out/stacks/prod-e/

      - name: Debug - Check state before imports
        run: |
          cd cdktf.out/stacks/prod-e/
          terraform init -upgrade
          terraform state list > state-before-imports.log
          cat state-before-imports.log
          cd ../../

      - name: Clear conflicting state entries
        run: |
          cd cdktf.out/stacks/prod-e/
          terraform init -upgrade
          set +e
          terraform state list | grep -q "aws_db_subnet_group.rds_new-subnet-group_E54AD540" && terraform state rm aws_db_subnet_group.rds_new-subnet-group_E54AD540
          terraform state list | grep -q "aws_iam_role.ecs_ecs-task-execution-role_3775D793" && terraform state rm aws_iam_role.ecs_ecs-task-execution-role_3775D793
          terraform state list | grep -q "aws_iam_role.ecs_ecs-task-role_12D46AC3" && terraform state rm aws_iam_role.ecs_ecs-task-role_12D46AC3
          terraform state list | grep -q "aws_lb.alb_88D76693" && terraform state rm aws_lb.alb_88D76693
          terraform state list | grep -q "aws_lb_target_group.alb_ecs-target-group_7A1FFA55" && terraform state rm aws_lb_target_group.alb_ecs-target-group_7A1FFA55
          terraform state list | grep -q "aws_lb_target_group.alb_grafana-target-group_B6047762" && terraform state rm aws_lb_target_group.alb_grafana-target-group_B6047762
          terraform state list | grep -q "aws_lb_target_group.alb_prometheus-target-group_64B90CF3" && terraform state rm aws_lb_target_group.alb_prometheus-target-group_64B90CF3
          terraform state list | grep -q "aws_lambda_function.backup_backup-lambda_62A5F41F" && terraform state rm aws_lambda_function.backup_backup-lambda_62A5F41F
          terraform state list | grep -q "aws_s3_bucket.backup_backup-bucket_F99A4016" && terraform state rm aws_s3_bucket.backup_backup-bucket_F99A4016
          set -e
          cd ../../

      - name: Initialize Terraform and execute import script
        run: |
          chmod +x import-commands.sh
          ls -l import-commands.sh  # Debug: Check script in root
          cp import-commands.sh cdktf.out/stacks/prod-e/
          ls -l cdktf.out/stacks/prod-e/import-commands.sh  # Debug: Check script after copy
          cd cdktf.out/stacks/prod-e/
          terraform init -upgrade
          echo "Running import script: $(ls -l ./import-commands.sh)"
          sh ./import-commands.sh > import-commands.log 2>&1 || { echo "Script failed, check log"; cat import-commands.log; exit 1; }
          cat import-commands.log
          cd ../../

      - name: Debug - Check state after imports
        run: |
          cd cdktf.out/stacks/prod-e/
          terraform init -upgrade
          terraform state list > state-after-imports.log
          cat state-after-imports.log
          grep "aws_db_subnet_group.rds_new-subnet-group_E54AD540" state-after-imports.log || { echo "Error: DB subnet group not imported"; exit 1; }
          grep "aws_iam_role.ecs_ecs-task-execution-role_3775D793" state-after-imports.log || { echo "Error: ECS task execution role not imported"; exit 1; }
          grep "aws_iam_role.ecs_ecs-task-role_12D46AC3" state-after-imports.log || { echo "Error: ECS task role not imported"; exit 1; }
          grep "aws_lb.alb_88D76693" state-after-imports.log || { echo "Error: ALB not imported"; exit 1; }
          grep "aws_lb_target_group.alb_ecs-target-group_7A1FFA55" state-after-imports.log || { echo "Error: ECS target group not imported"; exit 1; }
          grep "aws_lb_target_group.alb_grafana-target-group_B6047762" state-after-imports.log || { echo "Error: Grafana target group not imported"; exit 1; }
          grep "aws_lb_target_group.alb_prometheus-target-group_64B90CF3" state-after-imports.log || { echo "Error: Prometheus target group not imported"; exit 1; }
          grep "aws_lambda_function.backup_backup-lambda_62A5F41F" state-after-imports.log || { echo "Error: Lambda function not imported"; exit 1; }
          grep "aws_s3_bucket.backup_backup-bucket_F99A4016" state-after-imports.log || { echo "Error: S3 bucket not imported"; exit 1; }
          cd ../../

      - name: Deploy
        run: cdktf deploy --auto-approve

  resource-check:
    needs: deploy
    uses: ./.github/workflows/resource-check.yml
    secrets: inherit
