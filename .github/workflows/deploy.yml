name: CDKTF Deploy

on:
  push:
    branches:
      - main
  # Allow manual triggering
  workflow_dispatch:

jobs:
  apply:
    name: CDKTF Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read # Allow checkout
      # Add id-token permission if using OIDC for AWS auth in the future
      # id-token: write
    env:
      # --- AWS Credentials (Set directly from secrets) ---
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # --- Terraform Cloud ---
      # Use the specific token name expected by setup-terraform
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
      # TF Vars needed by main.ts (assuming TF_TOKEN is the same as above)
      TF_TOKEN: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
      TF_ORG: ${{ vars.TF_ORG }} # Use GitHub Variable
      TF_WORKSPACE: ${{ vars.TF_WORKSPACE }} # Use GitHub Variable

      # --- Project Configuration (Use GitHub Variables) ---
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      PROJECT_NAME: ${{ vars.PROJECT_NAME }}
      NODE_ENV: production # Set explicitly for deployment

      # --- Backend Service Config ---
      BACKEND_DESIRED_COUNT: ${{ vars.BACKEND_DESIRED_COUNT }}
      BACKEND_CONTAINER_NAME: ${{ vars.BACKEND_CONTAINER_NAME }}
      BACKEND_PORT: ${{ vars.BACKEND_PORT }}
      BACKEND_CPU: ${{ vars.BACKEND_CPU }}
      BACKEND_MEMORY: ${{ vars.BACKEND_MEMORY }}
      BACKEND_TAG: ${{ vars.BACKEND_TAG }}
      BACKEND_HEALTH_PATH: ${{ vars.BACKEND_HEALTH_PATH }}

      # --- Grafana Service Config ---
      GRAFANA_DESIRED_COUNT: ${{ vars.GRAFANA_DESIRED_COUNT }}
      GRAFANA_CONTAINER_NAME: ${{ vars.GRAFANA_CONTAINER_NAME }}
      GRAFANA_PORT: ${{ vars.GRAFANA_PORT }}
      GRAFANA_CPU: ${{ vars.GRAFANA_CPU }}
      GRAFANA_MEMORY: ${{ vars.GRAFANA_MEMORY }}
      GRAFANA_TAG: ${{ vars.GRAFANA_TAG }}
      GRAFANA_ROOT_URL: ${{ vars.GRAFANA_ROOT_URL }}
      GRAFANA_ADMIN_USER: ${{ vars.GRAFANA_ADMIN_USER }}
      GRAFANA_ALLOW_SIGNUP: ${{ vars.GRAFANA_ALLOW_SIGNUP }}

      # --- RDS/DB Config ---
      DB_SECRET_ID: ${{ vars.DB_SECRET_ID }}

      # --- Networking Config ---
      ECS_EGRESS_CIDR: ${{ vars.ECS_EGRESS_CIDR }}

      # --- REMOVED Lambda Config ---
      # LAMBDA_RUNTIME: ${{ vars.LAMBDA_RUNTIME }}
      # LAMBDA_HANDLER: ${{ vars.LAMBDA_HANDLER }}
      # LAMBDA_TIMEOUT: ${{ vars.LAMBDA_TIMEOUT }}
      # LAMBDA_CODE_PATH: ${{ vars.LAMBDA_CODE_PATH }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # No specific ref needed if triggering on push to main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Use LTS version
          cache: 'npm'

      - name: Install dependencies
        run: npm ci # Use clean install for CI

      # No global CDKTF install needed, use npx

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.2 # As per template, might need adjustment
          cli_config_credentials_token: ${{ env.TF_TOKEN_app_terraform_io }}

      - name: Get CDKTF Providers and Modules
        # Run from root directory
        run: npx cdktf get

      - name: Synthesize Terraform Configuration
        # Run from root directory
        run: npx cdktf synth

      - name: Apply Terraform Configuration
        # Run from root directory
        # Note: This directly applies changes on push to main.
        # Consider adding a Plan step and manual approval for production safety.
        run: npx cdktf deploy --auto-approve
