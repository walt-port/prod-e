name: AWS Resource Cleanup
# Weekly cleanup of unused AWS resources to reduce costs and maintain a clean environment

on:
  schedule:
    # Run weekly on Sunday at 2:00 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no deletions)'
        type: boolean
        default: true
      keep_latest:
        description: 'Number of latest versions to keep'
        type: number
        default: 5
      resource_types:
        description: 'Comma-separated list of resource types to clean (leave empty for all)'
        type: string
        required: false

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq awscli

      - name: Verify script exists
        run: |
          if [ ! -f "scripts/maintenance/cleanup-resources.sh" ]; then
            echo "Error: Cleanup script not found at scripts/maintenance/cleanup-resources.sh"
            exit 1
          fi
          chmod +x scripts/maintenance/cleanup-resources.sh

      - name: Run pre-cleanup resource check
        id: pre_check
        run: |
          echo "Running pre-cleanup resource check..."
          mkdir -p reports
          chmod +x scripts/monitoring/resource_check.sh
          ./scripts/monitoring/resource_check.sh --csv=reports/pre_cleanup_resources.csv
          echo "Pre-cleanup resource check completed."

      - name: Run cleanup
        id: cleanup
        run: |
          echo "Starting resource cleanup process..."

          # Create script arguments based on inputs
          ARGS=""
          if [ "${{ github.event.inputs.dry_run || 'true' }}" == "true" ]; then
            echo "Running in DRY RUN mode - no actual deletions will occur"
            ARGS="--dry-run"
          else
            echo "Running in FORCE mode - resources will be deleted"
            ARGS="--force"
          fi

          # Add keep parameter
          ARGS="$ARGS --keep=${{ github.event.inputs.keep_latest || '5' }}"

          # Add resource types if specified
          if [ -n "${{ github.event.inputs.resource_types }}" ]; then
            ARGS="$ARGS --resources=${{ github.event.inputs.resource_types }}"
          fi

          # Run with detailed output
          ./scripts/maintenance/cleanup-resources.sh $ARGS --output=reports/cleanup_results.txt

          # Check exit code
          if [ $? -ne 0 ]; then
            echo "Cleanup process encountered errors"
            cat reports/cleanup_results.txt
            echo "cleanup_success=false" >> $GITHUB_OUTPUT
          else
            echo "Cleanup process completed successfully"
            cat reports/cleanup_results.txt
            echo "cleanup_success=true" >> $GITHUB_OUTPUT
          fi

      - name: Run post-cleanup resource check
        if: always()
        run: |
          echo "Running post-cleanup resource check..."
          chmod +x scripts/monitoring/resource_check.sh
          ./scripts/monitoring/resource_check.sh --csv=reports/post_cleanup_resources.csv
          echo "Post-cleanup resource check completed."

      - name: Generate summary report
        if: always()
        run: |
          echo "Generating cleanup summary report..."

          # Create summary file
          cat > reports/cleanup_summary.md << EOL
          # AWS Resource Cleanup Summary

          Run date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          Mode: ${{ github.event.inputs.dry_run == 'true' && 'DRY RUN' || 'FORCE' }}
          Keep latest versions: ${{ github.event.inputs.keep_latest || '5' }}

          ## Cleanup Results

          \`\`\`
          $(cat reports/cleanup_results.txt || echo "No cleanup results available")
          \`\`\`

          ## Resource Changes

          $(if [ -f reports/pre_cleanup_resources.csv ] && [ -f reports/post_cleanup_resources.csv ]; then
            echo "Resources before cleanup: $(grep -v '^Type' reports/pre_cleanup_resources.csv | wc -l)"
            echo "Resources after cleanup: $(grep -v '^Type' reports/post_cleanup_resources.csv | wc -l)"
          else
            echo "Resource count comparison not available"
          fi)
          EOL

      - name: Upload cleanup results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cleanup-reports
          path: reports/
          retention-days: 30

      - name: Notify on Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,workflow
          text: |
            AWS Resource Cleanup ${{ job.status }}
            Mode: ${{ github.event.inputs.dry_run == 'true' && 'DRY RUN' || 'FORCE' }}
            ${{ steps.cleanup.outputs.cleanup_success == 'true' && 'Successfully completed' || 'Completed with issues' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true
