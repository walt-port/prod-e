name: Health Monitor
# Runs health checks after deployment
# For complete documentation, see docs/ci-cd.md

on:
  workflow_run:
    workflows: ['Deploy Infrastructure']
    types: [completed]
  schedule:
    # Run hourly at minute 0
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      notify:
        description: 'Send notifications'
        type: boolean
        default: true

# Add permissions needed for issue creation
permissions:
  contents: read
  issues: write

jobs:
  health-check:
    name: Monitor Service Health
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Install dependencies
        run: |
          npm ci
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Add ALB DNS Check
        run: |
          ALB_DNS="prod-e-alb-962304124.us-west-2.elb.amazonaws.com"  # Real ALB DNS
          if curl -s -o /dev/null -w "%{http_code}" http://$ALB_DNS/grafana | grep -q 200; then
            echo "Grafana health check passed."
          else
            echo "Grafana health check failed!"
            exit 1
          fi
          # Check ECS services
          aws ecs describe-services --cluster prod-e-cluster --services grafana-service --region us-west-2 --query 'services[0].runningCount' --output text
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Run health check
        id: health_check
        run: |
          echo "Running health check at $(date)"

          # Create results directory
          mkdir -p ./health-results

          # Initialize variables with default values
          ALB_DNS=""
          BACKEND_STATUS="000"
          PROMETHEUS_STATUS="000"
          GRAFANA_STATUS="000"

          # Get the ALB DNS name
          echo "Getting ALB DNS name..."
          ALB_DNS=$(aws elbv2 describe-load-balancers --names prod-e-alb --query "LoadBalancers[0].DNSName" --output text 2>/dev/null)

          if [[ -n "$ALB_DNS" && "$ALB_DNS" != "None" ]]; then
            echo "ALB DNS: $ALB_DNS"

            # Test backend health endpoint
            echo "Checking backend health..."
            BACKEND_STATUS=$(curl -s -o ./health-results/backend-health.json -w "%{http_code}" "http://${ALB_DNS}/health" --max-time 10 || echo "000")
            echo "Backend Health Status: $BACKEND_STATUS"

            # Test Prometheus endpoint
            echo "Checking Prometheus health..."
            PROMETHEUS_STATUS=$(curl -s -o ./health-results/prometheus-health.json -w "%{http_code}" "http://${ALB_DNS}/prometheus/-/healthy" --max-time 10 || echo "000")
            echo "Prometheus Status: $PROMETHEUS_STATUS"

            # Test Grafana endpoint
            echo "Checking Grafana health..."
            GRAFANA_STATUS=$(curl -s -o ./health-results/grafana-health.json -w "%{http_code}" "http://${ALB_DNS}/grafana/api/health" --max-time 10 || echo "000")
            echo "Grafana Status: $GRAFANA_STATUS"
          else
            echo "Cannot find ALB 'prod-e-alb'"
            echo "ALB not found" > ./health-results/alb-status.json
          fi

          # Check ECS services health
          echo "Checking ECS services..."
          aws ecs describe-services --cluster prod-e-cluster --services backend-service grafana-service prometheus-service > ./health-results/ecs-services.json

          # Extract service status
          BACKEND_SERVICE_STATUS=$(jq -r '.services[] | select(.serviceName == "backend-service") | .status' ./health-results/ecs-services.json 2>/dev/null || echo "NOT_FOUND")
          GRAFANA_SERVICE_STATUS=$(jq -r '.services[] | select(.serviceName == "grafana-service") | .status' ./health-results/ecs-services.json 2>/dev/null || echo "NOT_FOUND")
          PROMETHEUS_SERVICE_STATUS=$(jq -r '.services[] | select(.serviceName == "prometheus-service") | .status' ./health-results/ecs-services.json 2>/dev/null || echo "NOT_FOUND")

          echo "ECS Service Status:"
          echo "  - Backend: $BACKEND_SERVICE_STATUS"
          echo "  - Grafana: $GRAFANA_SERVICE_STATUS"
          echo "  - Prometheus: $PROMETHEUS_SERVICE_STATUS"

          # Check RDS database status
          echo "Checking RDS instance..."
          aws rds describe-db-instances --db-instance-identifier prod-e-db > ./health-results/rds-status.json 2>/dev/null || echo '{"Error": "RDS instance not found"}' > ./health-results/rds-status.json

          DB_STATUS=$(jq -r '.DBInstances[0].DBInstanceStatus' ./health-results/rds-status.json 2>/dev/null || echo "NOT_FOUND")
          echo "RDS Status: $DB_STATUS"

          # Determine overall health status
          if [[ -n "$ALB_DNS" &&
                "$BACKEND_STATUS" == "200" &&
                ("$PROMETHEUS_STATUS" == "200" || "$PROMETHEUS_STATUS" == "302" || "$PROMETHEUS_STATUS" == "401") &&
                ("$GRAFANA_STATUS" == "200" || "$GRAFANA_STATUS" == "302" || "$GRAFANA_STATUS" == "401") &&
                "$BACKEND_SERVICE_STATUS" == "ACTIVE" &&
                "$GRAFANA_SERVICE_STATUS" == "ACTIVE" &&
                "$PROMETHEUS_SERVICE_STATUS" == "ACTIVE" &&
                ("$DB_STATUS" == "available" || "$DB_STATUS" == "available") ]]; then
            OVERALL_STATUS="healthy"
            echo "status=healthy" >> $GITHUB_OUTPUT
          else
            OVERALL_STATUS="unhealthy"
            echo "status=unhealthy" >> $GITHUB_OUTPUT

            # Create detailed report for unhealthy services
            echo "Creating detailed health report..."
            {
              echo "---"
              echo "title: Health Check Failed - $(date +%Y-%m-%d)"
              echo "labels: alert, monitoring"
              echo "assignees: walt-port"
              echo "---"
              echo ""
              echo "# Health Check Report - $(date)"
              echo "## Overall Status: UNHEALTHY"
              echo ""
              echo "## Service Status"

              # ALB Status
              if [[ -z "$ALB_DNS" ]]; then
                echo "- Load Balancer (prod-e-alb): ❌ Not Found"
              else
                echo "- Load Balancer (prod-e-alb): ✅ Available"
              fi

              # Backend Status
              if [[ "$BACKEND_STATUS" == "200" ]]; then
                echo "- Backend API: ✅ Healthy"
              else
                echo "- Backend API: ❌ Unhealthy ($BACKEND_STATUS)"
              fi

              # Prometheus Status - Accept 200, 302, 401 as valid
              if [[ "$PROMETHEUS_STATUS" == "200" || "$PROMETHEUS_STATUS" == "302" || "$PROMETHEUS_STATUS" == "401" ]]; then
                echo "- Prometheus: ✅ Healthy (Code: $PROMETHEUS_STATUS)"
              else
                echo "- Prometheus: ❌ Unhealthy ($PROMETHEUS_STATUS)"
              fi

              # Grafana Status - Accept 200, 302, 401 as valid
              if [[ "$GRAFANA_STATUS" == "200" || "$GRAFANA_STATUS" == "302" || "$GRAFANA_STATUS" == "401" ]]; then
                echo "- Grafana: ✅ Healthy (Code: $GRAFANA_STATUS)"
              else
                echo "- Grafana: ❌ Unhealthy ($GRAFANA_STATUS)"
              fi

              # ECS Services Status
              echo "- ECS Services:"
              echo "  - Backend: $([ "$BACKEND_SERVICE_STATUS" == "ACTIVE" ] && echo "✅ Active" || echo "❌ Not Active ($BACKEND_SERVICE_STATUS)")"
              echo "  - Grafana: $([ "$GRAFANA_SERVICE_STATUS" == "ACTIVE" ] && echo "✅ Active" || echo "❌ Not Active ($GRAFANA_SERVICE_STATUS)")"
              echo "  - Prometheus: $([ "$PROMETHEUS_SERVICE_STATUS" == "ACTIVE" ] && echo "✅ Active" || echo "❌ Not Active ($PROMETHEUS_SERVICE_STATUS)")"

              # RDS Status
              echo "- RDS Database: $([ "$DB_STATUS" == "available" ] && echo "✅ Available" || echo "❌ Not Available ($DB_STATUS)")"

              echo ""
              echo "## Details"

              # Detailed issues
              if [[ -z "$ALB_DNS" ]]; then
                echo "### Load Balancer Issues"
                echo "The Application Load Balancer 'prod-e-alb' was not found."
              fi

              if [[ "$BACKEND_STATUS" != "200" ]]; then
                echo "### Backend API Issues"
                echo "Response code: $BACKEND_STATUS"
                if [[ -f "./health-results/backend-health.json" ]]; then
                  echo "Response body:"
                  echo '```json'
                  cat ./health-results/backend-health.json
                  echo '```'
                fi
              fi

              if [[ "$PROMETHEUS_STATUS" != "200" && "$PROMETHEUS_STATUS" != "302" && "$PROMETHEUS_STATUS" != "401" ]]; then
                echo "### Prometheus Issues"
                echo "Response code: $PROMETHEUS_STATUS"
                if [[ -f "./health-results/prometheus-health.json" ]]; then
                  echo "Response body:"
                  echo '```json'
                  cat ./health-results/prometheus-health.json
                  echo '```'
                fi
              fi

              if [[ "$GRAFANA_STATUS" != "200" && "$GRAFANA_STATUS" != "302" && "$GRAFANA_STATUS" != "401" ]]; then
                echo "### Grafana Issues"
                echo "Response code: $GRAFANA_STATUS"
                if [[ -f "./health-results/grafana-health.json" ]]; then
                  echo "Response body:"
                  echo '```json'
                  cat ./health-results/grafana-health.json
                  echo '```'
                fi
              fi

              if [[ "$BACKEND_SERVICE_STATUS" != "ACTIVE" || "$GRAFANA_SERVICE_STATUS" != "ACTIVE" || "$PROMETHEUS_SERVICE_STATUS" != "ACTIVE" ]]; then
                echo "### ECS Service Issues"
                echo "One or more ECS services are not active."
                echo '```json'
                jq '.services[] | {serviceName, status, desiredCount, runningCount, events: .events[0:3]}' ./health-results/ecs-services.json
                echo '```'
              fi

              if [[ "$DB_STATUS" != "available" ]]; then
                echo "### RDS Database Issues"
                echo "The RDS instance 'prod-e-db' is not available (Status: $DB_STATUS)."
                echo '```json'
                jq '.DBInstances[0] | {DBInstanceStatus, DBInstanceClass, Engine, EngineVersion}' ./health-results/rds-status.json 2>/dev/null || echo "{\"Error\": \"No instance data available\"}"
                echo '```'
              fi
            } > ./health-results/health-report.md
          fi

          echo "Health check completed with status: $OVERALL_STATUS"

          # Add timestamp for Slack notification
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

      - name: Upload health check results
        uses: actions/upload-artifact@v4
        with:
          name: health-check-results
          path: ./health-results/
          retention-days: 7

      - name: Create GitHub issue for unhealthy services
        if: steps.health_check.outputs.status == 'unhealthy' && (github.event_name == 'schedule' || github.event.inputs.notify == 'true')
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HEALTH_REPORT_PATH: ./health-results/health-report.md
        with:
          filename: ${{ env.HEALTH_REPORT_PATH }}
          update_existing: true
          search_existing: open

      - name: Notify on Slack
        if: steps.health_check.outputs.status == 'unhealthy' && (github.event_name == 'schedule' || github.event.inputs.notify == 'true')
        continue-on-error: true
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,message,commit,author,action,eventName,workflow
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "danger",
                  "title": "❌ Health Check Failed",
                  "text": "One or more services are unhealthy. See GitHub issue for details.",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Workflow",
                      "value": "${{ github.workflow }}",
                      "short": true
                    }
                  ],
                  "footer": "GitHub Actions",
                  "footer_icon": "https://github.githubassets.com/favicon.ico",
                  "ts": ${{ env.TIMESTAMP }}
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TIMESTAMP: ${{ env.TIMESTAMP }}
