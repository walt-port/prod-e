name: Health Monitoring
# Runs hourly health checks on the infrastructure
# For complete documentation, see docs/ci-cd.md

on:
  schedule:
    # Run hourly at minute 0
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      notify:
        description: 'Send notifications'
        type: boolean
        default: true

jobs:
  health-check:
    name: Monitor Service Health
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Install dependencies
        run: |
          npm ci
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Run health check
        id: health_check
        run: |
          echo "Running health check at $(date)"

          # Create results directory
          mkdir -p ./health-results

          # Initialize variables with default values
          API_URL=""
          PROMETHEUS_URL=""
          HEALTH_STATUS="000"
          PROMETHEUS_STATUS="000"

          # Check API Gateway endpoints - Handle missing stack gracefully
          echo "Checking for API Gateway stack..."
          if aws cloudformation describe-stacks --stack-name prod-e-api &>/dev/null; then
            API_URL=$(aws cloudformation describe-stacks --stack-name prod-e-api --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" --output text)
            echo "API endpoint found: $API_URL"

            if [[ -n "$API_URL" ]]; then
              # Test API health endpoint
              HEALTH_STATUS=$(curl -s -o ./health-results/api-health.json -w "%{http_code}" $API_URL/health || echo "000")
              echo "API Health Status: $HEALTH_STATUS"
            else
              echo "API endpoint not found in stack outputs"
            fi
          else
            echo "API Gateway stack 'prod-e-api' does not exist or is not accessible"
            echo "Stack not deployed" > ./health-results/api-health.json
          fi

          # Check Prometheus metrics endpoint - Handle missing stack gracefully
          echo "Checking for Prometheus stack..."
          if aws cloudformation describe-stacks --stack-name prod-e-monitoring &>/dev/null; then
            PROMETHEUS_URL=$(aws cloudformation describe-stacks --stack-name prod-e-monitoring --query "Stacks[0].Outputs[?OutputKey=='PrometheusEndpoint'].OutputValue" --output text)
            echo "Checking Prometheus endpoint: $PROMETHEUS_URL"

            if [[ -n "$PROMETHEUS_URL" ]]; then
              PROMETHEUS_STATUS=$(curl -s -o ./health-results/prometheus-health.json -w "%{http_code}" $PROMETHEUS_URL/api/v1/query?query=up || echo "000")
              echo "Prometheus Status: $PROMETHEUS_STATUS"
            else
              echo "Prometheus endpoint not found in stack outputs"
            fi
          else
            echo "Prometheus stack 'prod-e-monitoring' does not exist or is not accessible"
            echo "Stack not deployed" > ./health-results/prometheus-health.json
          fi

          # Check CloudWatch metrics for Lambda functions - Only if Lambda likely exists
          echo "Checking for Lambda function..."
          if aws lambda get-function --function-name prod-e-api-handler &>/dev/null; then
            echo "Checking Lambda invocation metrics..."
            aws cloudwatch get-metric-statistics \
              --namespace AWS/Lambda \
              --metric-name Errors \
              --start-time $(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%SZ) \
              --end-time $(date -u +%Y-%m-%dT%H:%M:%SZ) \
              --period 3600 \
              --statistics Sum \
              --dimensions Name=FunctionName,Value=prod-e-api-handler > ./health-results/lambda-errors.json
          else
            echo "Lambda function 'prod-e-api-handler' does not exist or is not accessible"
            echo "{\"Error\": \"Lambda function not found\"}" > ./health-results/lambda-errors.json
          fi

          # Determine overall health status - Consider missing resources as unhealthy
          if [[ ! -z "$API_URL" && "$HEALTH_STATUS" == "200" && ! -z "$PROMETHEUS_URL" && "$PROMETHEUS_STATUS" == "200" ]]; then
            OVERALL_STATUS="healthy"
            echo "status=healthy" >> $GITHUB_OUTPUT
          else
            OVERALL_STATUS="unhealthy"
            echo "status=unhealthy" >> $GITHUB_OUTPUT

            # Create detailed report for unhealthy services
            echo "Creating detailed health report..."
            {
              echo "---"
              echo "title: Health Check Failed - $(date +%Y-%m-%d)"
              echo "labels: alert, monitoring"
              echo "assignees: walt-port"
              echo "---"
              echo ""
              echo "# Health Check Report - $(date)"
              echo "## Overall Status: UNHEALTHY"
              echo ""
              echo "## Service Status"

              # API Status with more detailed reporting
              if [[ -z "$API_URL" ]]; then
                echo "- API Gateway: ❌ Stack Not Deployed"
              else
                echo "- API Gateway: $([ $HEALTH_STATUS == "200" ] && echo "✅ Healthy" || echo "❌ Unhealthy ($HEALTH_STATUS)")"
              fi

              # Prometheus Status with more detailed reporting
              if [[ -z "$PROMETHEUS_URL" ]]; then
                echo "- Prometheus: ❌ Stack Not Deployed"
              else
                echo "- Prometheus: $([ $PROMETHEUS_STATUS == "200" ] && echo "✅ Healthy" || echo "❌ Unhealthy ($PROMETHEUS_STATUS)")"
              fi

              echo ""
              echo "## Details"

              if [[ -z "$API_URL" ]]; then
                echo "### API Gateway Issues"
                echo "CloudFormation stack 'prod-e-api' was not found or is not accessible."
              elif [[ "$HEALTH_STATUS" != "200" ]]; then
                echo "### API Gateway Issues"
                echo "Response code: $HEALTH_STATUS"
                if [[ -f "./health-results/api-health.json" ]]; then
                  echo "Response body:"
                  echo '```json'
                  cat ./health-results/api-health.json
                  echo '```'
                fi
              fi

              if [[ -z "$PROMETHEUS_URL" ]]; then
                echo "### Prometheus Issues"
                echo "CloudFormation stack 'prod-e-monitoring' was not found or is not accessible."
              elif [[ "$PROMETHEUS_STATUS" != "200" ]]; then
                echo "### Prometheus Issues"
                echo "Response code: $PROMETHEUS_STATUS"
                if [[ -f "./health-results/prometheus-health.json" ]]; then
                  echo "Response body:"
                  echo '```json'
                  cat ./health-results/prometheus-health.json
                  echo '```'
                fi
              fi
            } > ./health-results/health-report.md
          fi

          echo "Health check completed with status: $OVERALL_STATUS"

          # Add timestamp for Slack notification
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

      - name: Upload health check results
        uses: actions/upload-artifact@v4
        with:
          name: health-check-results
          path: ./health-results/
          retention-days: 7

      - name: Create GitHub issue for unhealthy services
        if: steps.health_check.outputs.status == 'unhealthy' && (github.event_name == 'schedule' || github.event.inputs.notify == 'true')
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HEALTH_REPORT_PATH: ./health-results/health-report.md
        with:
          filename: ${{ env.HEALTH_REPORT_PATH }}
          update_existing: true
          search_existing: open

      - name: Notify on Slack
        if: steps.health_check.outputs.status == 'unhealthy' && (github.event_name == 'schedule' || github.event.inputs.notify == 'true')
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,message,commit,author,action,eventName,workflow
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "danger",
                  "title": "❌ Health Check Failed",
                  "text": "One or more services are unhealthy. See GitHub issue for details.",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Workflow",
                      "value": "${{ github.workflow }}",
                      "short": true
                    }
                  ],
                  "footer": "GitHub Actions",
                  "footer_icon": "https://github.githubassets.com/favicon.ico",
                  "ts": ${{ env.TIMESTAMP }}
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TIMESTAMP: ${{ env.TIMESTAMP }}
